"use strict";
var Complex=require('Complex'); //exportable class
//var lgdCF=require('lgdCF'); //exportable class
var lpmCF=function(lgdCF, p, l, options){ //p, l, w, r, b, lambda0, q..l[i] is an associate array containing varaibles for lgdCF
	//var self=this;
    this.lgdCF=lgdCF;
	this.p=p;
	this.n=this.p.length;
	this.l=l;
	var notUsed={};
	var notUsedKeys=[];
	if(options.w){
		this.w=options.w;
	}	
	else{
		this.w=[];
		notUsed["w"]=[1];
		notUsedKeys.push("w");
	}
	if(options.b){
		this.b=options.b;
	}
	else {
		this.b=[];
		notUsed["b"]=0;
		notUsedKeys.push("b");
	}
	if(options.r){
		
		this.r=options.r;
	}
	else {
		this.r=[];
		notUsed["r"]=0;
		notUsedKeys.push("r");
	}
	if(options.lambda0){
		this.lambda0=options.lambda0;
	}
	else {
		this.lambda0=0;
	}
	if(options.q){
		this.q=options.q;
	}
	else {
		this.q=0;
	}
	this.lambda=this.lambda0;
	var m=notUsedKeys.length;
	var nn=this.n; //speed purposes
	for(var i=0; i<nn; i++){	
		for(var j=0; j<m; j++){
			//console.log(notUsedKeys[j]);
			//self[notUsedKeys[j]][i]=notUsed[notUsedKeys[j]];
			this[notUsedKeys[j]][i]=notUsed[notUsedKeys[j]];
		}
		this.lambda=this.lambda+this.r[i]*this.b[i];
	}
	this.m=this.w[0].length;
}
lpmCF.prototype.logCF=function(u){
	var v=[];
	var upperU=u.multiply(new Complex(-this.lambda, 0));
	upperU=upperU.exp().subtract(new Complex(1.0, 0)).multiply(new Complex(this.q, 0));
	upperU=upperU.subtract(u);
	var helperPhi=[];
	v[0]=new Complex(0, 0);
	var nn=this.n;//for speed purposes
	var mm=this.m;//for speed 
    //console.log(phiL.execute(upperU)); //is this the problem?
	for(var i=0; i<nn; i++){
		var li=this.l[i];//for speed purposes
		var phiL=new this.lgdCF(li);  //will this work?
		helperPhi[i]=phiL.execute(upperU).subtract(new Complex(1.0, 0)).multiply(new Complex(this.p[i], 0));
		v[0]=v[0].add(helperPhi[i].multiply(new Complex(this.w[i][0], 0)));
	}
	for(var j=1; j<mm; j++){
		v[j]=new Complex(0, 0);
		for(var i=0; i<nn; i++){
			v[j]=v[j].add(helperPhi[i].multiply(new Complex(this.w[i][j], 0)));
		}
	}
	return v;
}
lpmCF.prototype.getM=function(){
	return this.m;
}
module.exports=lpmCF; //exportable class