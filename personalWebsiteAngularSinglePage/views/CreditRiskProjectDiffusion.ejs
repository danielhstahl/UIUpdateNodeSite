<!DOCTYPE html>
<html>
    <head>        <meta name="contentType" content="projects">        <meta name="keywords" content="creditRisk">        <meta name="description" content="Density of Credit Portfolio">
         <% include  assets/includes/header %>        
         <script src="js/inverseNorm.js"></script>
    </head>
    <body>
        <div class='navbar-fixed-top'>
            <div class="container title lead">
                <h1>Distribution of Credit Losses</h1>
            </div>
        </div>
		<div class="container">        
			
			<div class='row '>
				<div class='col-md-12 holdSection'>
                    <div class='subTitle lead'>
                        <h2>Basic Portfolio Attributes</h2>
                    </div>
                    <div class='toggle txt' id='descriptionNumAssets'>
                        The number of assets in the portfolio and the time horizon of the portfolio.  Even very large portfolios can be efficiently computed using this algorithm.
                    </div>
					<div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="NumAssets">Number of Assets</span>
						<input id="n" type="text" name="" class="form-control required" placeholder="100000">
					</div>
                    <div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="NumAssets">Time Horizon</span>
						<input id="t" type="text" name="" class="form-control required" placeholder="1">
					</div>
                    <br>
                </div>
            </div>
            <hr>
            <div class='row'>
                <div id='pdf' class='col-md-4 holdSection'>
                    <div class='subTitle lead'>
                        <h2>Exposure</h2>
                    </div>
                    <div class='toggle txt' id='Exposure'>                        
                        This is the distribution for the exposure of each asset.  In this case, each exposure follows a CIR process \(dL=\mu(b-L)dt+v \sqrt{L} dW_t\).  In general, the exposures may follow completely different distributions for each asset, but it would be onerous to specify a different distribution for each of \(n\) assets.  
                    </div>
                    <div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">mu</span> 
						<input id="mu" type="text" name="" class="form-control required" placeholder=".3">
					</div> 
					
					<div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">b</span>
						<input id="b" type="text" name="" class="form-control required" placeholder=".5">
					</div>                                        <div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">v</span>						<input id="v" type="text" name="" class="form-control required" placeholder=".2">					</div>                    <button class='btn btn-success btn-block' id='newSampleCir'>Generate Additional Sample Path</button>
                    
                </div>
                <div class='col-md-8'>   
                    <div id="ExposureChart"></div>
                </div>
            </div>
            <hr>
            <div class='row'>
                <div id='pd' class='col-md-12 holdSection'>
                    <div class='subTitle lead'>
                        <h2>Probability of Default</h2>
                    </div>
                    <div class='toggle txt' id='Probability'>
                        Use this to generate the distribution of probabilities of default.  The sample is from a uniform distribution.  Note that this distribution is not incorporated in the actual model; it is simply a technique to generate \(n\) different default probabilities without explicitly defining each probability.  In practice the probabilities of default would be generated from some sort of PD model (preferably one with intensity based modeling rather than static logistic style modeling).  Stochastic default is driven by the Systemic Default Variable below. 
                    </div>
                    <div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">Minimum PD</span> 
						<input id="minPD"  type="text" name="" class="form-control required" placeholder=".001">
					</div> 
					<div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">Maximum PD</span> 
						<input id="maxPD"  type="text" name="" class="form-control required" placeholder=".1">
					</div>                     
										
				</div>
			</div>
            <hr>
            <div class='row'>
                <div id='ts' class='col-md-4 holdSection'>
                    <div class='subTitle lead'>
                        <h2>Systemic Default Parameters</h2>
                    </div>
                    <div class='toggle txt' id='Underlying'>
                        This is the parametrization for the underlying systemic variable which has dynamics \(dX=\alpha(1-X)dt+\sigma dW_t\).  In general this can be an \(m\) dimensional process; however entering parameters for each process would be onerous.  
                    </div>
                    <div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">X0</span> 
						<input id="X0"  type="text" name="" class="form-control required" placeholder="1">
					</div> 
					<div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">alpha</span> 
						<input id="alpha"  type="text" name="" class="form-control required" placeholder=".1">
					</div> 
					
					<div class="input-group"><span class="input-group" id="">
						<span class="input-group-addon" id="">sigma</span>
						<input id="sigma" type="text" name="" class="form-control required" placeholder=".3">
					</div>
                    <button class='btn btn-success btn-block' id='newSample'>Generate Additional Sample Path</button>					
				</div>
				<div class='col-md-8'>   
                    <div id="UnderlyingChart"></div>
                </div>
			</div>            <hr>            <div class='row'>                <div id='diffusion' class='col-md-12 holdSection'>                    <div class='subTitle lead'>                        <h2>Drift Parameter</h2>                    </div>                    <div class='toggle txt' id='diffsection'>                        The model allows for drift for each asset; time changed by the systemic default process.  The drift is thus correlated with the potential for credit loss.  An alternate interpretation in the case of a multidimensional systemic process can be made if one of the dimensions is considered an interest rate.  Then the drift can have the interpretation as the linear function of the interest rate.  This would be a reasonable interpretation if many of the assets were variable rate loans tied to a single benchmark.                    </div>					<!--<div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">sigma</span>						<input id="sig" type="text" name="" class="form-control required" placeholder=".1">					</div>-->                    <div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">alpha</span>						<input id="alph" type="text" name="" class="form-control required" placeholder=".05">					</div>				</div>            </div>            <hr>            <div class='row'>                <div id='liquidity' class='col-md-12 holdSection'>                    <div class='subTitle lead'>                        <h2>Liquidity Parameters</h2>                    </div>                    <div class='toggle txt' id='diffsection'>                        The model allows for endogenous liquidity risk.  The probability of having a run on liabilities is increasing in the asset loss, so the greater the asset loss the higher the probability of having to fire-sell assets to cover liabilities.  \(q\) is proportional to the probability of a liquidity crisis while \(\lambda\) is proportional to the severity of the loss.                    </div>					<div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">q</span>						<input id="q" type="text" name="" class="form-control required" placeholder=".05">					</div>                    <div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">lambda</span>						<input id="lambda" type="text" name="" class="form-control required" placeholder=".05">					</div>				</div>            </div>            <hr>            <div class='row'>                <div id='diffusion' class='col-md-12 holdSection'>                    <div class='subTitle lead'>                        <h2>Model Parameters</h2>                    </div>                    <div class='toggle txt' id='diffsection'>                        Select the number of discrete steps in \(x\) and the number of discrete steps in \(u\).  The higher these numbers, the slower the model will run; but the more precise the model will be.                    </div>					<div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">Steps in \(x\)</span>						<input id="h" type="text" name="" class="form-control required" placeholder="1024">					</div>                    <div class="input-group"><span class="input-group" id="">						<span class="input-group-addon" id="">Steps in \(u\)</span>						<input id="k" type="text" name="" class="form-control required" placeholder="128">					</div>				</div>            </div>
            <hr>
			<div class='row'>
                <div class='col-md-4'>
                    <input id='submitButton' type="submit" class="btn btn-primary btn-block"></input>
                </div>
                <div class='col-md-8'>                    <div class='progress'>                        <div id="progressBar" class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>                    </div>
                    <div id="finalChart"></div>
                </div>
            </div>
			
		</div>        <div class="modal fade" id="explanationModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">          <div class="modal-dialog" role="document">            <div class="modal-content">              <div class="modal-header">                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>                <h4 class="modal-title" id="myModalLabel">Error</h4>              </div>              <div class="modal-body">                There is a known issue with the current implementation of the algorithm that results in non-sense results for certain parameter values.  The next version of this site will fix this issue.  For now, try different parameter values!  The default values work well.              </div>              <div class="modal-footer">                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>              </div>            </div>          </div>        </div>
        <% include  assets/includes/menu %><!--side menu -->
    </body>
    <% include  assets/includes/footerScripts %> <!--final includes for side menu -->
    <script>
        $('.progress').hide();//('hidden');
        var exposureChart="";
        var tsChart={};
        var unifChart="";
        var finalChart="";
        var xAxis;
        var yAxis;
        var data={};
        var attributes={};
       
        $('#newSample').click(function(e){
            getValues();
            var data=createTS(attributes.X0, attributes.alpha, 1.0, attributes.sigma, attributes.t, 0);
            tsChart["UnderlyingChart"].addSeries({                        
                name: "Sample Path",
                data: data[1] 
            });
            return false;
        });        $('#newSampleCir').click(function(e){
            getValues();
            var data=createTS(attributes.b, attributes.mu, attributes.b, attributes.v, attributes.t, .5);            tsChart["ExposureChart"].addSeries({                        
                name: "Sample Path",
                data: data[1] 
            });
            return false;
        });        
        $('span.input-group-addon').click(function(e){
            $(this).closest('.holdSection').find('.toggle').show();
        }); 
        /*function computeP(){
            var p=[];
            var l=[];
            var r=[];
            var w=[];
            var max=attributes.maxPD;
            var min=attributes.minPD;
            for(var i=0; i<attributes.n; i++){
                p.push(Math.random()*(max-min)+min);
                r.push(0);
                l.push({a:attributes.a, b:attributes.b});
                w.push([1]);
            }
            return [p, r, w, l];      
        }*/        var socket=io();
        $('#submitButton').click(function(e){
            getValues();            socket.removeAllListeners();
            $('#progressBar').css("width", '0%');            var maxL=40000.0;//hardcoded for now            var minL=10000.0;            var exL=(maxL+minL)/2.0;                        var lossGivinLiquid=attributes.n*exL*attributes.lambda;             var options={};            //var param=computeP();
            //options.p=param[0];
            //options.l=param[3]; //doesnt matter....not used
            //options.r=param[1];//no liquidity per loan            if(lossGivinLiquid>0){
                options.q=attributes.q/lossGivinLiquid;//liquidity            }            else {                options.q=0;            }            options.maxL=maxL;            options.minL=minL;
            options.rho=[[1]];//['rho'];
            options.alpha=[attributes.alpha];
            //options.a=attributes.a;//gamma parameter            options.mu=attributes.mu;//cir parameter
            //options.b=attributes.b;//gamma parameter            options.b=attributes.b;//cir parameter            options.v=attributes.v;//cir parameter
            options.k=attributes.k;
            options.h=attributes.h;
            options.t=attributes.t;
            options.sigma=[[attributes.sigma]];
            options.y0=[attributes.X0];
           // options.w=param[2];            options.n=attributes.n;            options.maxPD=attributes.maxPD;            options.minPD=attributes.minPD;            //options.sig=attributes.sig; //in the future, this should be n-dimensional            options.alph=attributes.alph; //in the future, this should be n-dimensional
            options.lambda0=lossGivinLiquid; //            //options.bL=.5;//CIR exposure parameter...either remove this or make this part of the GUI           // options.alphL=.2;            //options.sigL=.2;                        
            $('.progress').show();//('hidden');           // console.log(options);                        socket.emit('creditPressed', options);            socket.on('update', function(data){                //console.log(data);                $('#progressBar').css("width", data);
			});            socket.on('result', function(data){                $('.progress').hide();                //data=event.data.result;                console.log(data);                if(isNaN(data.y[0]) || Math.abs(data.y[0])>100) { //something bad happened in the algorithm...                    $('#explanationModal').modal();                }                else{                    createFinalChart(data.x, data.y, data.maxY);                               }	            });
            return false;
        });
        function createCharts(){
            getValues();            plotTS(attributes.b, attributes.mu,  attributes.v, attributes.t, "ExposureChart", attributes.b, .5);            plotTS(attributes.X0, attributes.alpha,  attributes.sigma, attributes.t, "UnderlyingChart", 1, 0);
           // plotPdf(attributes['a'], attributes['b']);
           // plotTS(attributes.X0, attributes.alpha, attributes.sigma, attributes.t);
            /*plotUnif(attributes.minPD, attributes.maxPD);*/
        } 
        function refreshChart(id){
            getValues();
            if(id==='pdf'){
                //plotPdf(attributes['a'], attributes['b']);                plotTS(attributes.b, attributes.mu,  attributes.v, attributes.t, "ExposureChart", attributes.b, .5);
            }
            /*else if(id==='pd'){
                plotUnif(attributes.minPD, attributes.maxPD);
            }*/
            else if(id==='ts'){
                plotTS(attributes.X0, attributes.alpha,  attributes.sigma, attributes.t, "UnderlyingChart", 1, 0);
            }
        }
        $('.form-control').keypress(function(e){
            var id=$(this).closest('.holdSection').attr('id');
            //console.log(id);
            setTimeout(function(){
                    refreshChart(id);
                },
                500
            );
        }); 
        function plotPdf( alpha, beta){
            var range=alpha*beta+5*Math.sqrt(alpha*(beta*beta));
            var discrete=50;
            var dx=range/discrete;
            var data=[];
            //data.push({"xaxis":0, "yaxis":0, "animation":0});
            var xSeries=[];
            var ySeries=[];         
            for(var i=0; i<discrete; i++){
                var x=i*dx;
                var pdf=pdfGamma(x, alpha, beta);
                xSeries.push(x);
                ySeries.push(pdf);
            }            
            exposureChart=new Highcharts.Chart({
                chart:{
                    type:'spline',
                    renderTo: 'ExposureChart'
                },
                title: {
                    text:""
                },
                credits:{
                    enabled:false
                },
                xAxis:{
                    categories:xSeries,
                    labels:{
                        formatter: function() {
                            return Highcharts.numberFormat(this.value,2, ".", ",");
                        }
                    }
                },
                yAxis:{
                    min:0
                },
                legend:{
                    enabled:false
                },
                plotOptions: {
                    spline: {
                        lineWidth: 2,
                        states: {
                            hover: {
                                lineWidth: 4
                            }
                        },
                        marker: {
                            enabled: false
                        }
                    }
                }, 
                series:[
                    {
                        name:'PDF', 
                        data:ySeries
                    }
                ]
            });
        }
        function createFinalChart(x, y, yMax){            var n=x.length;            var nMin=0;            var nMax=n-1;            var yMin=yMax*.003; //since otherwise long lead in, lead out            //console.log(y[nMin]);            //console.log(yMax);            while(y[nMin]<yMin){                  nMin++;            }            while(y[nMax]<yMin){                nMax--;            }            var xAxis=x.slice(nMin, nMax+1);            var yAxis=y.slice(nMin, nMax+1);           $('#finalChart').empty();
            finalChart=new Highcharts.Chart({//$('#ExposureChart').highcharts({
                chart:{
                    type:'spline',
                    renderTo: 'finalChart',                    zoomType:'x'
                },
                title: {
                    text:""
                },
                credits:{
                    enabled:false
                },
                xAxis:{
                    categories:xAxis,                   // min:xmin,                   // max:xmax,
                    labels:{
                        formatter: function() {
                            return Highcharts.numberFormat(this.value,2, ".", ",");
                        }
                    }
                },
                yAxis:{
                    min:0
                },
                legend:{
                    enabled:false
                },
                plotOptions: {
                    spline: {
                        lineWidth: 2,
                        states: {
                            hover: {
                                lineWidth: 4
                            }
                        },
                        marker: {
                            enabled: false
                        }
                    }
                }, 
                series:[
                    {
                        name:'density', 
                        data:yAxis
                    }
                ]
            });            //finalChart.xAxis[0].setExtremes(xmin,xmax);            //finalChart.showResetZoom();
        }                        
        function createTS(X0,alpha, b, sigma, t, delta){
            var discrete=200;
            var dx=t/discrete;
            var sdx=Math.sqrt(dx);
            var inv=new inverseNorm();
            var xSeries=[];
            var ySeries=[];
            xSeries.push(0);
            ySeries.push(X0);
            for(var i=1; i<discrete; i++){
                var norm=inv.qNorm(Math.random());
                xSeries.push(i*dx);
                ySeries.push(ySeries[i-1]+alpha*(b-ySeries[i-1])*dx+Math.pow(ySeries[i-1], delta)*sdx*sigma*norm);
            } 
            return([xSeries, ySeries]);
        }
        function plotTS(X0,alpha, sigma, t, chartID, b, delta){
            var data=createTS(X0, alpha, b, sigma, t, delta);
            var ySeries=data[1];
            var xSeries=data[0];
            tsChart[chartID]=new Highcharts.Chart({//$('#UnderlyingChart').highcharts({
                chart:{
                    type:'line',
                    renderTo: chartID
                },
                title: {
                    text:""
                },
                credits:{
                    enabled:false
                },
                xAxis:{
                    categories:xSeries,
                    labels:{
                        formatter: function() {
                            return Highcharts.numberFormat(this.value,2, ".", ",");
                        }
                    }
                },
                yAxis:{
                    min:0
                },
                legend:{
                    enabled:false
                },
                plotOptions: {
                    spline: {
                        lineWidth: 2,
                        states: {
                            hover: {
                                lineWidth: 4
                            }
                        },
                        marker: {
                            enabled: false
                        }
                    }
                }, 
                series:[
                    {
                        name:'TS', 
                        data:ySeries
                    }
                ] 
            
            });
        }
        function pdfGamma(x, alpha, beta){
            return Math.pow(1.0/beta, alpha)*Math.pow(x, alpha-1)*Math.exp(-x/beta)/gamma(alpha);
        }
        function gamma(z) {
            return Math.sqrt(2 * Math.PI / z) * Math.pow((1 / Math.E) * (z + 1 / (12 * z - 1 / (10 * z))), z);
        }
        createCharts();
    </script>
</head>